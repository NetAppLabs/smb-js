/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface JsSmbHandlePermissionDescriptor {
  mode: 'read' | 'readwrite'
}
export interface JsSmbGetDirectoryOptions {
  create: boolean
}
export interface JsSmbGetFileOptions {
  create: boolean
}
export interface JsSmbRemoveOptions {
  recursive: boolean
}
export interface JsSmbCreateWritableOptions {
  keepExistingData: boolean
}
export interface JsSmbStat {
  readonly inode?: bigint
  readonly size: bigint
  readonly creationTime: bigint
  readonly modifiedTime: bigint
  readonly accessedTime: bigint
}
export interface JsSmbNotifyChange {
  path: string
  action: string
  fromPath?: string
}
export declare class JsSmbDirectoryHandleEntries {
  [Symbol.asyncIterator]: AsyncIterableIterator<[string, JsSmbDirectoryHandle | JsSmbFileHandle]>
}
export declare class JsSmbDirectoryHandleKeys {
  [Symbol.asyncIterator]: AsyncIterableIterator<string>
}
export declare class JsSmbDirectoryHandleValues {
  [Symbol.asyncIterator]: AsyncIterableIterator<JsSmbDirectoryHandle | JsSmbFileHandle>
}
export declare class JsSmbHandle {
  readonly kind: 'directory' | 'file'
  readonly name: string
  isSameEntry(other: JsSmbHandle): boolean
  queryPermission(perm: JsSmbHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsSmbHandlePermissionDescriptor): Promise<string>
  stat(): Promise<JsSmbStat>
}
export declare class JsSmbDirectoryHandle {
  [Symbol.asyncIterator]: JsSmbDirectoryHandle['entries']
  readonly kind: 'directory'
  readonly name: string
  constructor(url: string)
  toHandle(): JsSmbHandle
  isSameEntry(other: JsSmbHandle): boolean
  queryPermission(perm: JsSmbHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsSmbHandlePermissionDescriptor): Promise<string>
  entries(): AsyncIterableIterator<[string, JsSmbDirectoryHandle | JsSmbFileHandle]>
  keys(): AsyncIterableIterator<string>
  values(): AsyncIterableIterator<JsSmbDirectoryHandle | JsSmbFileHandle>
  getDirectoryHandle(name: string, options?: JsSmbGetDirectoryOptions): Promise<JsSmbDirectoryHandle>
  getFileHandle(name: string, options?: JsSmbGetFileOptions): Promise<JsSmbFileHandle>
  removeEntry(name: string, options?: JsSmbRemoveOptions): Promise<void>
  resolve(possibleDescendant: JsSmbHandle): Promise<Array<string> | null>
  watch(callback: (...args: any[]) => any): Cancellable
}
export declare class Cancellable {
  wait(): Promise<void>
  cancel(): void
}
export declare class JsSmbFileHandle {
  readonly kind: 'file'
  readonly name: string
  toHandle(): JsSmbHandle
  isSameEntry(other: JsSmbHandle): boolean
  queryPermission(perm: JsSmbHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsSmbHandlePermissionDescriptor): Promise<string>
  getFile(): Promise<File>
  createWritable(options?: JsSmbCreateWritableOptions): Promise<JsSmbWritableFileStream>
}
export declare class JsSmbFile {
  readonly size: number
  readonly type: string
  readonly lastModified: number
  readonly name: string
  arrayBuffer(): Promise<ArrayBuffer>
  slice(start?: number, end?: number, contentType?: string): Blob
  stream(): ReadableStream<Uint8Array>
  text(): Promise<string>
}
export declare class JsSmbReadableStreamSource {
  readonly type: 'bytes'
  pull(controller: ReadableByteStreamController): void
}
export declare class JsSmbWritableFileStream {
  readonly locked: boolean
  write(
    data:
      | ArrayBuffer
      | ArrayBufferView
      | DataView
      | Blob
      | String
      | string
      | {
          type: 'write' | 'seek' | 'truncate'
          data?: ArrayBuffer | ArrayBufferView | DataView | Blob | String | string
          position?: number
          size?: number
        },
  ): Promise<void>
  seek(position: number): Promise<void>
  truncate(size: number): Promise<void>
  close(): Promise<void>
  abort(reason: string): Promise<string>
  releaseLock(): void
  getWriter(): WritableStreamDefaultWriter
}
export declare class JsSmbWritableStreamSink {
  start(controller?: WritableStreamDefaultController): Promise<void>
  abort(reason: string): Promise<string>
  close(controller?: WritableStreamDefaultController): Promise<void>
  write(chunk: any, controller?: WritableStreamDefaultController): Promise<void>
}
